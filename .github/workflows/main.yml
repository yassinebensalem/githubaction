name: Node.js CI

on:
  push:
    branches:
      - master
      - 'releases/**'
      - dev
      - main
  pull_request:
    branches:
      - master
      - 'releases/**'
      - dev
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          cache: 'npm'
      - run: npm install
      - run: npm install -g jest
      - run: npm test

  build-and-push-to-hub:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Docker image for releases
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/releases'
        run: |
          docker build -t my-docker-image .
        

          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} docker.io

          docker tag my-docker-image docker.io/yassinedockeer/my-docker-image:releases
          docker push docker.io/yassinedockeer/my-docker-image:releases
          docker tag my-docker-image docker.io/yassinedockeer/my-docker-image:releases
          docker push docker.io/yassinedockeer/my-docker-image:releases
          
         

      - name: Build Docker image for dev
        if: github.ref == 'refs/heads/dev' 
        run: |
          docker build -t my-docker-image .
          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} docker.io
           docker tag my-docker-image docker.io/yassinedockeer/my-docker-image:dev
          docker push docker.io/yassinedockeer/my-docker-image:dev
          docker tag my-docker-image docker.io/yassinedockeer/my-docker-image:${{ github.ref_slug }}

  run-docker-compose:
    needs: build-and-push-to-hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run docker-compose
        run: docker-compose up -d
   
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Generate SSH key
      run: ssh-keygen -t rsa -b 4096 -f ssh_key -N ""

    - name: Store private key as secret
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | az keyvault secret set --vault-name "my-key-vault" --name "ssh-private-key" --value "@-"
    - name: Generate SSH key pair
      run: |
        ssh-keygen -t rsa -b 4096 -C "y" -f my-ssh-key
        echo "Here's your new SSH private key:"
        cat my-ssh-key
        echo "Here's your new SSH public key:"
        cat my-ssh-key.pub
        echo "Save the private key as a GitHub secret named SSH_PRIVATE_KEY"
    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Deploy to remote server
      run: |
        ssh ssh vagrant@172.10.0.140 -p 22  "echo 'Hello, world!'"
